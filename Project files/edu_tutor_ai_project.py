# -*- coding: utf-8 -*-
"""EDU-TUTOR-AI Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VTBlSvq7wfnWkYJdK8Gzzkc5CQkT6o4d
"""

# Install dependencies
!pip install -q gradio transformers torch

import gradio as gr
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch

# Load model and tokenizer
model_name = "ibm-granite/granite-3.3-2b-instruct"
HF_TOKEN = "ENTER YOUR HUGGING FACE TOKEN"

tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=HF_TOKEN)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    device_map="auto",
    use_auth_token=HF_TOKEN
)
device = "cuda" if torch.cuda.is_available() else "cpu"

# User database
users = {
    "alice": {"password": "1234", "role": "student", "progress": {}},
    "bob": {"password": "abcd", "role": "teacher", "progress": {}},
    "admin": {"password": "admin", "role": "admin", "progress": {}}
}
session_state = {"user": None}

# Core functions
def login(username, password):
    user = users.get(username)
    if user and user["password"] == password:
        session_state["user"] = {"name": username, "role": user["role"]}
        return f"‚úÖ Logged in as {username} ({user['role']})"
    return "‚ùå Login failed"

def register(username, password, role):
    if username in users:
        return "‚ùå Username already exists!"
    if role not in ["student", "teacher", "admin"]:
        return "‚ùå Invalid role"
    users[username] = {"password": password, "role": role, "progress": {}}
    return f"‚úÖ User {username} registered as {role}!"

def ai_tutor(subject, topic):
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    role = session_state["user"]["role"]
    prompt = f"You are a helpful AI tutor for a {role}. Explain the following topic in {subject}:\n\nTopic: {topic}\n\nExplanation:"
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    users[session_state["user"]["name"]]["progress"][topic] = "Learned"
    return response

def generate_quiz(subject, topic):
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    role = session_state["user"]["role"]
    prompt = f"You are an AI quiz generator for a {role}. Create 3 quiz questions with answers about {topic} in {subject}.\n\nFormat:\nQ1: ...\nA1: ...\nQ2: ...\nA2: ...\nQ3: ...\nA3: ..."
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    quiz = tokenizer.decode(outputs[0], skip_special_tokens=True)
    users[session_state["user"]["name"]]["progress"][topic] = "Quiz generated"
    return quiz

def view_progress():
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    progress = users[session_state["user"]["name"]]["progress"]
    return "\n".join([f"{k}: {v}" for k, v in progress.items()]) if progress else "üì≠ No progress yet."

def get_profile():
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    user_info = session_state["user"]
    return f"üë§ Username: {user_info['name']}\nüî∞ Role: {user_info['role']}"

def logout():
    session_state["user"] = None
    return "üö™ Logged out successfully!"

# Dark mode CSS
custom_css = """
body {
    background-color: #121212;
    color: #ffffff;
}
textarea, input, select, button {
    background-color: #1e1e1e !important;
    color: #ffffff !important;
    border: 1px solid #333 !important;
}
.gr-box {
    background-color: #1e1e1e !important;
}
"""

# Gradio UI
with gr.Blocks(css=custom_css) as demo:
    gr.Markdown("## üéì AI Edu-Tutor (Dark Mode)\nA smart tutor & quiz generator for students and teachers.")

    with gr.Tab("üìù Register"):
        with gr.Group():
            reg_username = gr.Textbox(label="Choose Username")
            reg_password = gr.Textbox(label="Choose Password", type="password")
            reg_role = gr.Dropdown(choices=["student", "teacher", "admin"], label="Role")
            reg_btn = gr.Button("Register", variant="primary")
            reg_status = gr.Textbox(label="Status", interactive=False)
            reg_btn.click(register, inputs=[reg_username, reg_password, reg_role], outputs=reg_status)

    with gr.Tab("üîê Login"):
        with gr.Group():
            username = gr.Textbox(label="Username")
            password = gr.Textbox(label="Password", type="password")
            login_btn = gr.Button("Login", variant="primary")
            login_status = gr.Textbox(label="Status", interactive=False)
            login_btn.click(login, inputs=[username, password], outputs=login_status)

    with gr.Tab("üìò AI Tutor"):
        with gr.Group():
            subject = gr.Textbox(label="Subject")
            topic = gr.Textbox(label="Topic to learn about")
            ask_btn = gr.Button("Ask Tutor", variant="primary")
            tutor_response = gr.Textbox(label="Tutor Response", lines=10, interactive=False)
            ask_btn.click(ai_tutor, inputs=[subject, topic], outputs=tutor_response)

    with gr.Tab("üß† Quiz Generator"):
        with gr.Group():
            subject_q = gr.Textbox(label="Subject")
            topic_q = gr.Textbox(label="Topic for quiz")
            quiz_btn = gr.Button("Generate Quiz", variant="primary")
            quiz_output = gr.Textbox(label="Quiz Output", lines=10, interactive=False)
            quiz_btn.click(generate_quiz, inputs=[subject_q, topic_q], outputs=quiz_output)

    with gr.Tab("üìä Progress Tracker"):
        with gr.Group():
            progress_btn = gr.Button("View My Progress")
            progress_output = gr.Textbox(label="Progress", lines=10, interactive=False)
            progress_btn.click(view_progress, outputs=progress_output)

    with gr.Tab("üë§ Profile"):
        with gr.Group():
            profile_btn = gr.Button("Show My Info")
            profile_output = gr.Textbox(label="Profile", lines=3, interactive=False)
            profile_btn.click(get_profile, outputs=profile_output)
            logout_btn = gr.Button("Logout", variant="secondary")
            logout_status = gr.Textbox(label="Logout Status", interactive=False)
            logout_btn.click(logout, outputs=logout_status)

demo.launch(share=True)
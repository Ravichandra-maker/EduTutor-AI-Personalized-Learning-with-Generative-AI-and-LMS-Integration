# -*- coding: utf-8 -*-
"""EDU-TUTOR-AI PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tuBsA0RrBHoTGCWuUhBtA_gpMoS0A7eF
"""

# Install dependencies
!pip install -q gradio transformers torch

import gradio as gr
from transformers import AutoModelForCausalLM, AutoTokenizer
import torch
import os

# Setup
model_name = "ibm-granite/granite-3.3-2b-instruct"
HF_TOKEN = "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"
tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=HF_TOKEN)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16,
    device_map="auto",
    use_auth_token=HF_TOKEN
)
device = "cuda" if torch.cuda.is_available() else "cpu"

# Memory
users = {}
session_state = {"user": None, "avatars": {}, "files": []}

# Functions
def register(username, password, role, avatar):
    if username in users:
        return "‚ùå Username exists!"
    if role not in ["student", "teacher", "admin"]:
        return "‚ùå Invalid role"
    users[username] = {"password": password, "role": role, "progress": {}}
    if avatar:
        avatar_path = f"avatars/{username}.png"
        os.makedirs("avatars", exist_ok=True)
        avatar.save(avatar_path)
        session_state["avatars"][username] = avatar_path
    return f"‚úÖ User {username} registered as {role}!"

def login(username, password):
    user = users.get(username)
    if user and user["password"] == password:
        session_state["user"] = {"name": username, "role": user["role"]}
        return f"‚úÖ Logged in as {username} ({user['role']})"
    return "‚ùå Login failed"

def logout():
    session_state["user"] = None
    return "üö™ Logged out successfully!"

def get_profile():
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    name = session_state["user"]["name"]
    role = session_state["user"]["role"]
    avatar = session_state["avatars"].get(name, None)
    return f"üë§ Username: {name}\nüî∞ Role: {role}", avatar

def ai_tutor(subject, topic):
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    role = session_state["user"]["role"]
    prompt = f"You are a helpful AI tutor for a {role}. Explain the following topic in {subject}:\n\nTopic: {topic}\n\nExplanation:"
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    users[session_state["user"]["name"]]["progress"][topic] = "Learned"
    return response

def generate_quiz(subject, topic):
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    role = session_state["user"]["role"]
    prompt = f"You are an AI quiz generator for a {role}. Create 3 quiz questions with answers about {topic} in {subject}.\n\nFormat:\nQ1: ...\nA1: ...\nQ2: ...\nA2: ...\nQ3: ...\nA3: ..."
    inputs = tokenizer(prompt, return_tensors="pt").to(device)
    outputs = model.generate(**inputs, max_new_tokens=300)
    quiz = tokenizer.decode(outputs[0], skip_special_tokens=True)
    users[session_state["user"]["name"]]["progress"][topic] = "Quiz generated"
    return quiz

def view_progress():
    if not session_state["user"]:
        return "‚ö†Ô∏è Please login first."
    progress = users[session_state["user"]["name"]]["progress"]
    return "\n".join([f"{k}: {v}" for k, v in progress.items()]) if progress else "üì≠ No progress yet."

def download_progress():
    if not session_state["user"]:
        return ""
    name = session_state["user"]["name"]
    progress = users[name]["progress"]
    content = "\n".join([f"{k}: {v}" for k, v in progress.items()])
    path = f"{name}_progress.txt"
    with open(path, "w") as f:
        f.write(content if content else "No progress yet.")
    return path

def upload_file(file):
    if not session_state["user"]:
        return "‚ö†Ô∏è Login required"
    name = file.name
    os.makedirs("uploads", exist_ok=True)
    file_path = f"uploads/{name}"
    file.save(file_path)
    session_state["files"].append(file_path)
    return f"‚úÖ Uploaded: {name}"

def list_files():
    return [f for f in session_state["files"]]

# CSS for Dark Mode
dark_css = """
body { background-color: #121212; color: white; }
input, button, textarea, select { background-color: #1e1e1e !important; color: white !important; }
"""

# UI
with gr.Blocks(css=dark_css, theme=gr.themes.Base()) as demo:
    gr.Markdown("## üéì AI Edu-Tutor (Enhanced)")

    with gr.Tab("üìù Register"):

            reg_username = gr.Textbox(label="Choose Username")
            reg_password = gr.Textbox(label="Choose Password", type="password")
            reg_role = gr.Dropdown(choices=["student", "teacher", "admin"], label="Role")
            reg_avatar = gr.Image(label="Upload Avatar", type="pil")
            reg_btn = gr.Button("Register")
            reg_status = gr.Textbox(label="Status", interactive=False)
            reg_btn.click(register, inputs=[reg_username, reg_password, reg_role, reg_avatar], outputs=reg_status)

    with gr.Tab("üîê Login"):

            username = gr.Textbox(label="Username")
            password = gr.Textbox(label="Password", type="password")
            login_btn = gr.Button("Login")
            login_status = gr.Textbox(label="Login Status", interactive=False)
            login_btn.click(login, inputs=[username, password], outputs=login_status)

    with gr.Tab("üìò AI Tutor"):

            subject = gr.Textbox(label="Subject")
            topic = gr.Textbox(label="Topic")
            ask_btn = gr.Button("Ask Tutor")
            tutor_response = gr.Textbox(label="Tutor Response", lines=10, interactive=False)
            ask_btn.click(ai_tutor, inputs=[subject, topic], outputs=tutor_response)

    with gr.Tab("üß† Quiz Generator"):

            subject_q = gr.Textbox(label="Subject")
            topic_q = gr.Textbox(label="Topic for Quiz")
            quiz_btn = gr.Button("Generate Quiz")
            quiz_output = gr.Textbox(label="Quiz", lines=10, interactive=False)
            quiz_btn.click(generate_quiz, inputs=[subject_q, topic_q], outputs=quiz_output)

    with gr.Tab("üìä Progress"):

            progress_btn = gr.Button("View Progress")
            progress_output = gr.Textbox(label="Progress", lines=10, interactive=False)
            download_btn = gr.Button("üì• Export Progress")
            download_file = gr.File(label="Download Your Progress")
            progress_btn.click(view_progress, outputs=progress_output)
            download_btn.click(download_progress, outputs=download_file)

    with gr.Tab("üìÅ Upload Content"):

            file_up = gr.File(label="Upload Material")
            upload_btn = gr.Button("Upload File")
            upload_status = gr.Textbox(label="Status", interactive=False)
            upload_btn.click(upload_file, inputs=file_up, outputs=upload_status)
            file_list = gr.Button("üìÇ Show Uploaded Files")
            files_box = gr.File(label="Available Files", file_types=["*"], interactive=False)
            file_list.click(list_files, outputs=files_box)

    with gr.Tab("üë§ Profile"):

            profile_btn = gr.Button("View Profile")
            profile_info = gr.Textbox(label="User Info", interactive=False)
            profile_img = gr.Image(label="Avatar")
            logout_btn = gr.Button("Logout")
            logout_status = gr.Textbox(label="Status", interactive=False)
            profile_btn.click(get_profile, outputs=[profile_info, profile_img])
            logout_btn.click(logout, outputs=logout_status)

demo.launch(share=True)